/**
 * @fileoverview Firestore Security Rules for the photobooth application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * read and write their own user profile and photosheets. Public listing of
 * users is disallowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 * - /users/{userId}/photosheets/{photosheetId}: Stores a user's generated photosheets.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profile and photosheets).
 * - Public listing of all users is disallowed for privacy.
 * - All write operations require a verified user identity.
 *
 * Denormalization for Authorization:
 * The 'photosheets' subcollection stores a 'userId' field on each document. This denormalization enables efficient authorization checks
 * without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile documents. Users can read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile with matching userId.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "email": "test@example.com", "displayName": "Test User" } } }
     * @allow (get) User with UID 'user123' reads their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (update) User with UID 'user123' updates their own profile.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "email": "test@example.com", "displayName": "Updated Name" } } }
     * @allow (delete) User with UID 'user123' deletes their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with UID 'user123' attempts to create a profile for 'user456'.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user456", "email": "test@example.com" } } }
     * @deny (get) User with UID 'user123' attempts to read the profile of 'user456'.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (update) User with UID 'user123' attempts to update the profile of 'user456'.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user456", "email": "new@example.com" } } }
     * @deny (delete) User with UID 'user123' attempts to delete the profile of 'user456'.
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the user document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all users for privacy.
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure photosheet documents within a user's subcollection. Users can only access their own photosheets.
     * @path /users/{userId}/photosheets/{photosheetId}
     * @allow (create) User with UID 'user123' creates a photosheet in their own subcollection.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", "imageUrl": "data:image/png;base64,...", "copies": 4, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @allow (get) User with UID 'user123' reads a photosheet from their own subcollection.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (list) User with UID 'user123' lists photosheets from their own subcollection.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (update) User with UID 'user123' updates a photosheet in their own subcollection.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", "imageUrl": "data:image/png;base64,...", "copies": 6, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @allow (delete) User with UID 'user123' deletes a photosheet from their own subcollection.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with UID 'user123' attempts to create a photosheet in 'user456' subcollection.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user456", "imageUrl": "data:image/png;base64,...", "copies": 4, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (get) User with UID 'user123' attempts to read a photosheet from 'user456' subcollection.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (list) User with UID 'user123' attempts to list photosheets from 'user456' subcollection.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (update) User with UID 'user123' attempts to update a photosheet in 'user456' subcollection.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user456", "imageUrl": "data:image/png;base64,...", "copies": 6, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (delete) User with UID 'user123' attempts to delete a photosheet from 'user456' subcollection.
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Enforces document ownership and relational integrity by checking userId.
     */
    match /users/{userId}/photosheets/{photosheetId} {
       // Helper function to check if the request is made by the owner of the photosheet document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the photosheet document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }
  }
}